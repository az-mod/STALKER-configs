local M_SCRIPT_CUSTOM_EVENT = 2

local EVENTS =
{
	INIT_EVENT = 1, -- for single actor
	PLAYER_INIT_EVENT = 2,
	DOOR_USE = 3,
	DOOR_CHANGE_SECTION = 4,
	TRADE_CONFIG = 5,
	NPC_SOUND = 6,
	TELEPORT_PLAYER = 7,
	SURGE = 8, 			-- НЕ МЕНЯТЬ ИЗ ДВИЖКА ВЫЗОВ ВЫБРОСА
	SYNC_ATMOSHERE = 9,
	SURGE_TIME = 10,
	FALLOUT = 11,
	PSI_STORM = 12,
}

--

function gen_event(type)
	local P = net_packet()
	P:w_begin(M_SCRIPT_CUSTOM_EVENT)
	P:w_u8(EVENTS[type])
	return P
end

function send_to_server(P)
	script_events.send_to_server(P)
end

function send_to_client(clientId, P)
	script_events.send_to_client(clientId, P)
end

function send_broadcast(P)
	script_events.send_broadcast(P)
end

--

function cl_send_request_init_event()
	send_to_server(gen_event('INIT_EVENT'))
end

function cl_send_request_player_init_event()
	send_to_server(gen_event('PLAYER_INIT_EVENT'))
end

--

function process_client_events()
	while script_events.get_size_client_events() > 0 do
		--printf_msg('CL: start process event')
		local P = script_events.get_last_client_event()
		local type = P:r_u8()
		
		--printf_msg('event type: %d', type)

		if type == EVENTS.INIT_EVENT then
			-- init event for single actor object

		elseif type == EVENTS.PLAYER_INIT_EVENT then
			mp_doors_sync.cl_process_all_door_sections(P)
			mp_trade_sync.cl_process_all_trade_configs(P)

		elseif type == EVENTS.DOOR_CHANGE_SECTION then
			mp_doors_sync.cl_process_door_section(P)

		elseif type == EVENTS.TRADE_CONFIG then
			mp_trade_sync.cl_process_trade_config(P)

		elseif type == EVENTS.NPC_SOUND then
			sound_theme.cl_process_npc_sound(P) 
			
		elseif type == EVENTS.SURGE_TIME then
 			surge_manager.cl_process_surge_time(P)	
		elseif type == EVENTS.FALLOUT then
			fallout_manager.clientRecive(P)
		elseif type == EVENTS.PSI_STORM then
 			psi_storm_manager.clientRecive(P)
		end

		script_events.pop_last_client_event()
 	end
end

--

function process_server_events()	
	while script_events.get_size_server_events() > 0 do
		-- printf_msg('SV: start process event')
		local e = script_events.get_last_server_event()
		local P = e.Packet
		local type = P:r_u8()

		if type == EVENTS.INIT_EVENT then
			-- init event for single actor object
			local packet = gen_event('INIT_EVENT')
			send_to_client(e.SenderID, packet)

		elseif type == EVENTS.PLAYER_INIT_EVENT then
			local packet = gen_event('PLAYER_INIT_EVENT')
			mp_doors_sync.sv_write_all_door_sections(packet)
			mp_trade_sync.sv_write_all_trade_configs(packet)
			send_to_client(e.SenderID, packet)
			
		elseif type == EVENTS.DOOR_USE then
			mp_doors_sync.sv_process_use_door_event(e.SenderID, P)
			
		elseif type == EVENTS.SURGE then
			local surge_type = P:r_u8()
 
			if 	   (surge_type == 1) then
				surge_manager.StartSurge()	
			elseif (surge_type == 2) then
				fallout_manager.StartFallout()
			elseif (surge_type == 3) then
				psi_storm_manager.StartPsiStorm()
			end				
		elseif type == EVENTS.SYNC_ATMOSHERE then
			 
			atmosfear.get_atmosfear():LoadPacket(P)
		end

		script_events.pop_last_server_event()
		--printf_msg('SV: stop process event')
	end
end

--
