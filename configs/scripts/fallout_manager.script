--------------------------------------------------------------------------------
-- Fallout manager class -------------------------------------------------------
-- Made by Cromm Cruac ---------------------------------------------------------
-- Modify by SE7kills ----------------------------------------------------------
-- for AtmosFear 3 -------------------------------------------------------------
-- 14.12.2021 ------------------------------------------------------------------
--------------------------------------------------------------------------------

local fallout_manager = nil
local prev_sec = 0
local currentPPEfactor = 0.001
local currentTime = 0
local currentIndik=nil
local fadeFactor=0

local immuned_to_surge_squads = 
{
						["monster_predatory_day"] 	= true,
						["monster_predatory_night"] = true,
						["monster_vegetarian"] 		= true,
						["monster_zombied_day"] 	= true,
						["monster_zombied_night"] 	= true,
						["monster_special"] 		= true,
						["monster"]					= true,
						["zombied"]					= true
}

class "FalloutManager"
function FalloutManager:__init()

end

function FalloutManager:initiolized()
	self.atmosfear=atmosfear.get_atmosfear()
	
	self.effector_set=false
	self.fallout_sound 	= false
	self.fallout_in_progress=false
	self.task_given = false
	self.finished = true
	self.phase=nil
	self.loaded = false
	
	self.ini = ini_file("misc\\surge_manager.ltx")
	
	self.updateFactor=5
	self.powerFactor=100
	self.powerThreshold=0.001
	self.actorRadiationThreshold=0.5
	self.taskThreshold=0.004
			
	self.fadeTime=10*60
	self.fadeFactor=0
	
	
	local alife = ini_file("alife.ltx")
	
	if (alife:section_exist("alife_fallout")) then
		local env_factor = level.get_time_factor()		
		self.minDelayTime			= alife:r_u32("alife_fallout", "fallout_min")	  		  * 60 * 60
		self.maxDelayTime			= alife:r_u32("alife_fallout", "fallout_max")	  		  * 60 * 60 	
		self.minLengthTime			= alife:r_u32("alife_fallout", "fallout_duration_min")	  * 60 / env_factor
		self.maxLengthTime			= alife:r_u32("alife_fallout", "fallout_duration_max")	  * 60 / env_factor
	end
	
	self.nextFalloutIn = math.random(self.minDelayTime,  self.maxDelayTime)
	self.falloutLength = math.random(self.minLengthTime, self.maxLengthTime)
	
	self.inited_time = game.get_game_time()
	self.inited_time_sec = game.get_game_time()

	self.count = 0
	self.covers = {}
	self:init_fallout_covers()
	self.fallout_message = ""
	self.fallout_task_sect = ""
	self.finished = false
	self.fallout_in_progress=false	
	self.falloutType="rad"
	
	self.geiger_sounds =
	{
						geiger_1 = sound_object("detectors\\geiger_1"), 
						geiger_2 = sound_object("detectors\\geiger_2"), 
						geiger_3 = sound_object("detectors\\geiger_3"), 
						geiger_4 = sound_object("detectors\\geiger_4"), 
						geiger_5 = sound_object("detectors\\geiger_5"), 
						geiger_6 = sound_object("detectors\\geiger_6"), 
						geiger_7 = sound_object("detectors\\geiger_7"), 
						geiger_8 = sound_object("detectors\\geiger_8")
	}

	self.siren_sounds = {
		siren_1 = sound_object("ambient\\blowout\\blowout_siren")
	}
	
	self.clientHitPower = 0
	
	self.init = true
end

-- ###############################################################################################
--                                  START AND FINISH
-- ###############################################################################################

function FalloutManager:start()
	if not (self.init) then
		return
	end
	
	if (surge_manager.is_started() or psi_storm_manager.is_started()) then 
		return
	end
	
	if self.atmosfear.opt_enable_fallout==0 then
		self:finish()
		return
	end
 
	if (OnServer()) then
		local rnd = math.random()
		
		if rnd < 0.6 then
			self.falloutType="rad"
		else
			self.falloutType="acid"
		end		
	end
	
	self.finished = false
	self.fallout_in_progress=true
	self.inited_time_sec = game.get_game_time()

	-- start sound
	if not(self.fallout_sound) and self.falloutType=="acid" then
		xr_sound.play_sound_looped(db.get_actor():id(), "fallout_acid_rain")
		xr_sound.set_volume_sound_looped(db.get_actor():id(), "fallout_acid_rain", 0)
		self.fallout_sound=true
	end
	
	-- start effector
	if not(self.effector_set) then
		if self.falloutType=="rad" then
			level.add_pp_effector("radiation.ppe", 666, true)
		else
			level.add_pp_effector("acidic.ppe", 666, true)
		end
		
		level.set_pp_effector_factor(666,currentPPEfactor)
		self.effector_set=true
	end
	
	if self.atmosfear.opt_fallout_task=="give" then
		db.get_actor():give_game_news(
		"hide_from_fallout_"..self.falloutType.."_message_caption", 
		"hide_from_fallout_"..self.falloutType.."_message", 
		"ui_inGame2_Fallout_"..self.falloutType, 
		0, 
		10000
		)
	end
	
	self.minDelayTime			= math.floor(self.atmosfear.opt_fallout_freq/2)*3600
	self.maxDelayTime			= self.atmosfear.opt_fallout_freq*3600
	self.nextFalloutIn 			= math.random(self.minDelayTime, self.maxDelayTime)
end

function FalloutManager:finish()
	self.finished = true
	self.fallout_in_progress=false
	self.task_given = false
	self.clientHitPower = 0
	
	if self.atmosfear.opt_fallout_task=="give" and self.atmosfear.opt_enable_fallout==1 then
		db.get_actor():give_game_news(
		"end_fallout_"..self.falloutType.."_message_caption", 
		"end_fallout_"..self.falloutType.."_message", 
		"ui_inGame2_Fallout_"..self.falloutType, 
		0, 
		10000
		)
	end
	
	self.phase=nil
	self.fadeFactor=0
	self.inited_time=game.get_game_time()
	--printf_msg("Fallout ended because of no rain.")
	
	-- end sound
	if self.fallout_sound then
		xr_sound.stop_sound_looped(db.get_actor():id(), "fallout_acid_rain")
		self.fallout_sound=false
	end
	-- end effector
	if (self.effector_set) then
		level.remove_pp_effector(666)
		self.effector_set=false
		currentPPEfactor = 0.001
	end
	-- hide indicators
	self:displayIndicators(0)
	prev_sec=0
	
	--Debug
	--printf_msg("Fallout ended -> in progress = "..tostring(self.fallout_in_progress))
	if (OnServer()) then
		self:SendFinished()
	end
end

-- ###############################################################################################
--                                  UPDATE
-- ###############################################################################################

function FalloutManager:update()	
	if (db.get_actor() == nil) then 
		return;
	end
	
	if (OnClient()) then
		self:updateClient()
	else 
		self:updateServer()
	end
	
	-- printf_msg("rain_factor="..level.rain_factor())
	-- printf_msg("actor radiation="..db.get_actor().radiation)
	-- printf_msg("radiationPower="..radiationPower)
	-- printf_msg("hitPower="..hitPower)	
end
						 
function FalloutManager:updateClient()
	local local_actor = db.get_actor()

	if self.clientHitPower > self.powerThreshold then
		if self.fallout_in_progress==false then
			self:start()
			return
 		end
		
		local cover = self:get_nearest_cover()
		if(cover==nil and self.count==0) then
			self:init_fallout_covers()
 		end	
												
		local PPEfactor	
		if cover==nil or not(db.storage[cover].object:inside(local_actor:position())) then
			PPEfactor = self.clientHitPower / 2 * self.powerFactor
			if PPEfactor < 0.001 then 
				PPEfactor = 0.001 
			end
		else
			PPEfactor = 0.002
			--self:displayIndicators(0)
		end		
		
		currentPPEfactor = currentPPEfactor + (PPEfactor - currentPPEfactor) * 0.01			
		
		--printf_msg("PPEfactor="..PPEfactor)
		--printf_msg("currentPPEfactor="..currentPPEfactor)
		
		if self.fallout_sound then
			xr_sound.set_volume_sound_looped(local_actor:id(), "fallout_acid_rain", PPEfactor/2)
		else
			self:geigerSound(PPEfactor * 2)
		end
		
		if(self.effector_set) then
			level.set_pp_effector_factor(666,currentPPEfactor)
		end		
	
		if (prev_sec ~= self.diff_sec) then
	
			if self.clientHitPower > self.taskThreshold and not(self.task_given) then
				--printf_msg("FIND COVER")
				if self.atmosfear.opt_fallout_task=="give" then
					self:give_fallout_hide_task()
				end
				if self.atmosfear.opt_fallout_warning=="siren" then
					self:play_siren_sound()
				end
				self.task_given = true
			end	
		

			prev_sec = self.diff_sec
	 
			local h = hit()
			
			if self.falloutType=="rad" then
				h.type = hit.radiation
			else
				h.type = hit.chemical_burn
			end
			
			h.power = self.atmosfear:hit_power(self.clientHitPower, h.type)
			h.impulse = 0
			h.direction = vector():set(0,0,1)
			h.draftsman = local_actor
						
			if cover==nil or not(db.storage[cover].object:inside(local_actor:position())) then
				local_actor:hit(h)
				self:displayIndicators(self.clientHitPower * self.powerFactor)
			else 
				self:displayIndicators(0)
			end
		 end	
	end
end

function FalloutManager:updateServer()
	local g_time = game.get_game_time()
	if not(self.phase) then		
		local diff = math.floor(self.nextFalloutIn - g_time:diffSec(self.inited_time))
		
		if diff > 0 then
			--printf_msg("Next fallout begins in "..tostring(diff).." seconds")
 			--printf_msg("opt_enable_fallout="..tostring(self.atmosfear.opt_enable_fallout)..", is_started("..tostring(is_started())..")")
 		end
		
		if diff < 0 then 
			if level.rain_factor() > 0.001 then
				self.phase="fadein"
				self.inited_time=game.get_game_time()
				--printf_msg("Fallout begins")
			 else
				 --printf_msg("Fallout can begin but waiting for rain")
			 end
			return
		end			
	elseif self.phase=="fadein" then
		local diff = math.floor(self.fadeTime - g_time:diffSec(self.inited_time))
		self.fadeFactor = (self.fadeTime - diff) / self.fadeTime
		--printf_msg("fadeFactor="..tostring(self.fadeFactor))
		
		if diff < 0 then 
			self.fadeFactor=1
			self.phase="fallout"
			self.inited_time=game.get_game_time()
			self.falloutLength=math.random(self.minLengthTime, self.maxLengthTime)
			--printf_msg("Fallout at full scale")
		end			
	elseif self.phase=="fallout" then
		local diff = math.floor(self.falloutLength - g_time:diffSec(self.inited_time))
		--printf_msg("Fallout ends in "..tostring(diff).." seconds")
		
		if diff < 0 then 
			self.phase="fadeout"
			self.inited_time=game.get_game_time()
			--printf_msg("Main fallout ended. Fading out.")
		end	
	elseif self.phase=="fadeout" then
		local diff = math.floor(self.fadeTime - g_time:diffSec(self.inited_time))
		self.fadeFactor = diff / self.fadeTime
		--printf_msg("fadeFactor="..tostring(self.fadeFactor))
		
		if diff < 0 then 
			self.phase=nil
			self.fadeFactor=0
			self.inited_time=game.get_game_time()
			self.minDelayTime			= math.floor(self.atmosfear.opt_fallout_freq/2)*3600
			self.maxDelayTime			= self.atmosfear.opt_fallout_freq*3600
			self.nextFalloutIn			= math.random(self.minDelayTime, self.maxDelayTime)
			--self.atmosfear.debugMessages[5]:SetText("Fallout ended.")
		end	
	end
		
	local radiationPower = level.rain_factor() / self.powerFactor * self.fadeFactor
	local hitPower = radiationPower*self.updateFactor/2

	
	if hitPower > self.powerThreshold then
		if self.fallout_in_progress==false then
			self:start()
			return
 		end
		
		local cover = self:get_nearest_cover()
		if(cover==nil and self.count==0) then
			self:init_fallout_covers()
			--return
		end	
		
		
		self.diff_sec = math.ceil(game.get_game_time():diffSec(self.inited_time_sec)/self.updateFactor)
	
		--printf_msg("diff_sec="..tostring(self.diff_sec*self.updateFactor))
		
		
		if(prev_sec~=self.diff_sec) then
			prev_sec = self.diff_sec
			--printf_msg("send")
			self:serverUpdateNetworking(hitPower)
			--printf_msg("send_end")
			
			local h = hit()
			
			if self.falloutType=="rad" then
				h.type = hit.radiation
			else
				h.type = hit.chemical_burn
			end
			
			h.power = self.atmosfear:hit_power(hitPower, h.type)
			h.impulse = 0
			h.direction = vector():set(0,0,1)
			h.draftsman = local_actor
			
			-- if(OnClient()) then
				-- if cover==nil or not(db.storage[cover].object:inside(local_actor:position())) then
					-- local_actor:hit(h)
				-- end
			-- end

			--self:hitServerItemsInActors(hitPower, h)
			
			-- if (self.atmosfear.opt_fallout_fate=="poison") then
			-- 	   self:hit_all_unhided(hitPower)
			-- end
		end
	else  
		if self.fallout_in_progress==true then
			--printf_msg("rain_factor="..level.rain_factor())
			--printf_msg("hitPower="..hitPower)
			self:finish()
		end
	end
end

-- ###############################################################################################
--                                  Network Methods
-- ###############################################################################################
function FalloutManager:clientUpdateNetworking(Packet)
	local type = Packet:r_u8()
	if (type == 1) then 
		self:finish()
	else 
		self.diff_sec = Packet:r_u16()
 		self.clientHitPower = Packet:r_float()
		self.falloutType = Packet:r_stringZ()
		-- printf_msg("Diff[%d] / Hit[%f] / type [%s]", self.diff_sec, self.clientHitPower, self.falloutType)		
	end
end	

function clientRecive(Packet)
	get_fallout_manager():clientUpdateNetworking(Packet)
end

function FalloutManager:serverUpdateNetworking(HitPower)
	local packet = mp_events.gen_event('FALLOUT');
	packet:w_u8(0)
	packet:w_u16(self.diff_sec)
 	packet:w_float(HitPower)
	packet:w_stringZ(self.falloutType)
	mp_events.send_broadcast(packet)
end

function FalloutManager:SendFinished()
	local packet = mp_events.gen_event('FALLOUT')
	packet:w_u8(1)
	mp_events.send_broadcast(packet)
end

function StartFallout()
	local self = get_fallout_manager();
	if not(self.phase) then	
		self.phase="fadein"
		self.inited_time=game.get_game_time()
	end
end

-- ###############################################################################################
--                                  Update Methods
-- ###############################################################################################


function FalloutManager:hitServerItemsInActors(hitPower, hit)

	for key, act in pairs(db.players) do
		
		local local_actor = act
		local cover = self:get_nearest_cover()
		
		local_actor:hit(hit)

		if self.falloutType=="acid" then
			if cover==nil or not(db.storage[cover].object:inside(local_actor:position())) then
				-- suit damage
				local suit = local_actor:get_current_outfit()
				if suit ~= nil then
					local suit_obj = local_actor:object(suit:section())
					if suit_obj ~= nil then
						suit_obj:set_condition(suit:condition()-self.atmosfear:hit_power(hitPower, hit.type)/10)
					end
					--printf_msg("suit="..tostring(suit:section()))
				end
				
				-- helmet damage
				local helmet = local_actor:item_in_slot(12)
				
				if (helmet ~= nil) then
					local helmet_obj = local_actor:object(helmet:section())
					if helmet_obj ~= nil then
						helmet_obj:set_condition(helmet:condition()-self.atmosfear:hit_power(hitPower, hit.type)/10)
					end
					--printf_msg("helmet="..tostring(helmet:section()))
				end
			end
		end
	end
	
	
end

function FalloutManager:play_siren_sound()
	local zaton = vector():set(154, 8, 1522)
	local jupiter = vector():set(-200, 8, 300)
	local pripyat = vector():set(809, 48, 358)
	
	local dist_zaton   = db.get_actor():position():distance_to(zaton)
	local dist_jupiter = db.get_actor():position():distance_to(jupiter)
	local dist_pripyat = db.get_actor():position():distance_to(pripyat)
		
	local snd_position = nil
	
	if (dist_zaton > dist_pripyat and dist_jupiter > dist_pripyat) then	
 		snd_position = pripyat
	end 
	
	if (dist_zaton > dist_jupiter and dist_pripyat > dist_jupiter) then
 		snd_position = jupiter
	end
	
	if (dist_jupiter > dist_zaton and dist_pripyat > dist_zaton) then
 		snd_position = zaton
	end
	 
	
	local siren = self.siren_sounds["snd_obj_siren"]
	
	if siren ~= nil and siren:playing() then
		siren:stop()
	end		
	
	if (siren ~= nil) then
		siren:play_at_pos(db.get_actor(), snd_position)
		siren.volume = 1
		siren_snd_played = true
	end
end

function FalloutManager:init_fallout_covers()
	local ini = self.ini
	for i = 0, ini:line_count("list")-1 do
		temp1, id, temp2 = ini:r_line("list", i, "", "")
		local zone = db.zone_by_name[id]
		if zone ~= nil then
			self.count = self.count + 1
			self.covers[self.count] = zone
			if(ini:line_exist(id, "condlist")) then
				self.covers[self.count].condlist = {}
				self.covers[self.count].condlist = xr_logic.parse_condlist(npc, id, "condlist", ini:r_string(id, "condlist"))
			end
		end
	end
end

function FalloutManager:get_nearest_cover()
	local hides = {}
	utils.copy_table(hides, self.covers)
	if(self.count>0) then
		for k,v in pairs(hides) do
			if (v.condlist) then
				local sect = xr_logic.pick_section_from_condlist(db.get_actor(), nil, v.condlist)
				if(sect~="true" and sect~=nil) then
					table.remove(hides, k)
				end
			end
		end
		local nearest_cover_id = hides[1]:id()
		local nearest_cover_dist = hides[1]:position():distance_to(db.get_actor():position())
		for k,v in pairs(hides) do
			if (db.storage[v:id()].object == nil) then
				--printf_msg("object is nil")
				return
			end
		
			if db.storage[v:id()].object:inside(db.get_actor():position()) then
				return v:id()
			end
			local dist = v:position():distance_to(db.get_actor():position())
			if(dist<nearest_cover_dist) then
				if(v.condlist) then
					local sect = xr_logic.pick_section_from_condlist(db.get_actor(), nil, v.condlist)
					if(sect=="true") then
						nearest_cover_id = v:id()
						nearest_cover_dist = dist
					end
				else
					nearest_cover_id = v:id()
					nearest_cover_dist = dist
				end
			end
		end
		if(nearest_cover_id==hides[1]:id()) then
			if(hides[1].condlist) then
				local sect = xr_logic.pick_section_from_condlist(db.get_actor(), nil, hides[1].condlist)
				if(sect~="true" and sect~=nil) then
					return nil
				end
			end
		end
		return nearest_cover_id
	else
		return nil
	end
end

function FalloutManager:geigerSound(hitPower) 
	local delay = ((0.8-hitPower)*1000)
	local rnd=math.ceil((math.random(8000-1)+1)/1000)
	local snd_obj=self.geiger_sounds['geiger_'..tostring(rnd)]
	if delay<=0 then delay=0 end
	delay = delay + math.random(50)
	--self.debugMessages[11]:SetText("delay="..delay)
	local t=device():time_global()
	if t>currentTime+delay then
		if snd_obj ~= nil and snd_obj:playing() then
			snd_obj:stop()
		end
		if snd_obj ~= nil then
			snd_obj:play_at_pos(db.get_actor(), db.get_actor():position())
			snd_obj.volume = 1
		end
 		currentTime=t
	end
end

function FalloutManager:displayIndicators(power)
	if (OnServer()) then
		return
	end

	

	local indikType = self.falloutType
	local hud = get_hud()
	local indik
	if power>=0.8 then 
		indik="red"
	elseif power>=0.6 then 
		indik="orange"
	elseif power>=0.4 then 
		indik="yellow"
	elseif power>=0.1 then 
		indik="green"
	else 
		indik=nil 
	end

	

	local aspectRatio=""
	
	if self.atmosfear.aspectRatio~=1 then
		aspectRatio="_16"
	end
	
	local indikName="atm_indik_"..indikType.."_"..tostring(indik)..aspectRatio
	local currentIndikName="atm_indik_"..indikType.."_"..tostring(currentIndik)..aspectRatio
	
	--printf_msg("Indicator [%s]", currentIndikName)
	--printf_msg("Prev Indik [%s]", indikName)
	
	--remove indik if 0
	if not indik and currentIndik~=nil then
		local hudIndikRem = hud:GetCustomStatic(currentIndikName)
		if hudIndikRem then
			hud:RemoveCustomStatic(currentIndikName)
		end
		currentIndik=nil
		return
	end
	
	-- display different indik 
	if currentIndik~=indik then
		-- first remove existing one
		if currentIndik~=nil then
			local hudIndik = hud:GetCustomStatic(currentIndikName)
			if hudIndik then
				hud:RemoveCustomStatic(currentIndikName)
			end
		end
		-- now display new one
		if indik then
			hud:AddCustomStatic(indikName)
			currentIndik=indik
		end
	end

end

function FalloutManager:give_fallout_hide_task()
	if(self.fallout_message~="empty") then
		local mess = ""
		if(self.fallout_message=="") then
			local time = 0
			mess = game.translate_string("hide_from_fallout"..self.falloutType.."_message")
		--	else
			-- mess = game.translate_string(self.fallout_message)
		end
	end
	
	if(self.fallout_task_sect~="empty") then
		if(self.fallout_task_sect=="") then
			task_manager.get_task_manager():give_task("hide_from_fallout_"..self.falloutType)
		-- else
			-- task_manager.get_task_manager():give_task(self.fallout_task_sect)
		end
	end
end

--#################################################################################################
--#                                 export Functs
--################################################################################################

function get_fallout_manager()
	if fallout_manager == nil then
		fallout_manager = FalloutManager()
	end
	return fallout_manager
end

function is_started()
	local m = get_fallout_manager()
	return m.fallout_in_progress
end

function is_finished()
	local m = get_fallout_manager()
	return m.finished == true
end


function actor_in_cover()
	local m = get_fallout_manager()
	local cover_id = m:get_nearest_cover()
	if (cover_id ~= nil) and (db.storage[cover_id].object:inside(db.get_actor():position())) then
		return true
	else
		return false
	end
end

function get_falloutType()
	local m = get_fallout_manager()
	return m.falloutType
end

function get_task_title()
	local title = ""
	local m = get_fallout_manager()
	if(actor_in_cover()) then
		title = "hide_from_fallout_"..m.falloutType.."_name_2"
	else
		title = "hide_from_fallout_"..m.falloutType.."_name_1"
	end
	return title
end

function get_task_descr()
	local descr = ""
	local m = get_fallout_manager()
	if(actor_in_cover()) then
		descr = game.translate_string("hide_from_fallout_"..m.falloutType.."_descr_2_a")
	else
		descr = game.translate_string("hide_from_fallout_"..m.falloutType.."_descr_1_a")
	end
	return descr
end

function get_task_target()
	local m = get_fallout_manager()
	if(actor_in_cover()) then
		return nil
	end
	return m:get_nearest_cover()
end
