local say_phrase1 = false 
local say_phrase2 = false
local say_phrase3 = false

local surge_shock_pp_eff = 1
local earthquake_cam_eff = 2


--Atmosfear 3 

local siren_snd_played = false;
local begin_snd_played = false;
local impact_snd_played = false;
local blowout_waves = {}
local blowout_wave_start_1 = false
local blowout_wave_start_2 = false
local blowout_wave_start_3 = false
local blowout_wave_start_4 = false 



local sounds = {
	snd_obj_siren = sound_object("ambient\\blowout\\blowout_siren"),
	snd_obj_begin1 = sound_object("ambient\\blowout\\blowout_begin"),
	snd_obj_begin2 = sound_object("ambient\\blowout\\blowout_begin_02"),
	snd_obj_impact1 = sound_object("ambient\\blowout\\blowout_impact"),
	snd_obj_impact2 = sound_object("ambient\\blowout\\blowout_impact_02"),

	wave01		= sound_object("ambient\\blowout\\blowout_wave_01"),
	wave02		= sound_object("ambient\\blowout\\blowout_wave_02_short"),
	wave03		= sound_object("ambient\\blowout\\blowout_wave_03_short"),
	wave04		= sound_object("ambient\\blowout\\blowout_wave_04")
}

--//Atmosfear 


function reset_phrase()
	say_phrase1 = false
	say_phrase2 = false
	say_phrase3 = false 
	
	siren_snd_played  = false
	begin_snd_played  = false
	impact_snd_played = false	
	
	blowout_wave_start_1 = false
	blowout_wave_start_2 = false
	blowout_wave_start_3 = false
	blowout_wave_start_4 = false 
end

function stopAllSounds(self)
	for k, sound in pairs (sounds) do
		sound:stop()
	end
	
	if(self.wave_sound) then
		xr_sound.stop_sound_looped(db.get_actor():id(), "blowout_particle_wave_looped")
		self.wave_sound = false
	end	
	
	xr_sound.stop_sound_looped(db.get_actor():id(), "blowout_rumble")
	xr_sound.stop_sound_looped(db.get_actor():id(), "surge_earthquake_sound_looped")
end

function stopEffects()
	for k, tab in pairs(blowout_waves) do
		if (tab.effect ~= nil) then
			tab.effect:stop_deffered()
			tab = {}
		end
	end
end

function update(self) 
--	printf_msg("Sec: "..tostring(self.diff_sec) .. "/"..tostring(self.surge_time))
	
	if(self.diff_sec >= self.surge_time) then
		self:end_surge()
		self.weather_set = false
		--printf_msg("Stop Surge")
		if (OnClient()) then
			stopAllSounds(self)
			stopEffects()
		end
		
		self.stages = {}
		return
	end
		
	if (OnServer()) then
		update_server(self)
	else 
		update_client(self)
	end
end
  
function play_siren_sound(self)
 
	local zaton = vector():set(154, 8, 1522)
	local jupiter = vector():set(-200, 8, 300)
	local pripyat = vector():set(809, 48, 358)
	
	local dist_zaton   = db.get_actor():position():distance_to(zaton)
	local dist_jupiter = db.get_actor():position():distance_to(jupiter)
	local dist_pripyat = db.get_actor():position():distance_to(pripyat)
		
	local snd_position = nil
	
	if (dist_zaton > dist_pripyat and dist_jupiter > dist_pripyat) then	
		-- printf_msg("Pripyat="..dist_pripyat)
		snd_position = pripyat
	end 
	
	if (dist_zaton > dist_jupiter and dist_pripyat > dist_jupiter) then
		-- printf_msg("Jupiter = "..dist_jupiter)				
		snd_position = jupiter
	end
	
	if (dist_jupiter > dist_zaton and dist_pripyat > dist_zaton) then
		-- printf_msg("Zaton="..dist_zaton)
		snd_position = zaton
	end
	 
	
	local siren = sounds["snd_obj_siren"]
	
	if siren ~= nil and siren:playing() then
		siren:stop()
	end		
	
	if (siren ~= nil and snd_position ~= nil) then
		--siren:play(db.get_actor())
		siren:play_at_pos(db.get_actor(), snd_position)
		siren.volume = 1
		siren_snd_played = true
	end	
end

function play_begin_sound(self, id_sound)
	local snd_obj = nil
	
	if (id_sound == 1) then 
		snd_obj = sounds["snd_obj_begin1"]
	elseif (id_sound == 2) then
		snd_obj = sounds["snd_obj_begin2"]
	end
	
	if snd_obj ~= nil then
		if ( snd_obj:playing() ) then
			snd_obj:stop()
		end
	end
	
	if snd_obj ~= nil then
		snd_obj:play(db.get_actor())
		snd_obj.volume = 1
		--printf_msg("play begins")
		begin_snd_played = true
	end
end

function play_blowout_sound(self, id_sound)
	local snd_obj = nil
	
	if (id_sound == 1) then 
		snd_obj = sounds["snd_obj_impact1"]
	elseif (id_sound == 2) then
		snd_obj = sounds["snd_obj_impact2"]
	end
	
	if snd_obj ~= nil then
		if ( snd_obj:playing() ) then
			snd_obj:stop()
		end
	end
	
	if snd_obj ~= nil then
		snd_obj:play(db.get_actor())
		snd_obj.volume = 1
		--printf_msg("play impacts")
		impact_snd_played = true
	end
end

function WaveOrigAtmosfear3(self, time_start, Wave)
	local actor_pos=db.get_actor():position()
 	local inited_pos=vector():set(actor_pos.x, actor_pos.y/2, actor_pos.z+250)
	
	blowout_waves[Wave] = {effect=particles_object("crommcruac\\blowout_wave_blend"),inited_time=time_start,inited_pos=inited_pos}
	blowout_waves[Wave].effect:play_at_pos(inited_pos)

	if (Wave == 1) then
		blowout_wave_start_1 = true
	end
	if (Wave == 2) then
		blowout_wave_start_2 = true
	end
	if (Wave == 3) then
		blowout_wave_start_3 = true
	end
	if (Wave == 4) then
		blowout_wave_start_4 = true
	end
	
	if not(self.wave_sound) then
		xr_sound.play_sound_looped(db.get_actor():id(), "blowout_particle_wave_looped")
		xr_sound.set_volume_sound_looped(db.get_actor():id(), "blowout_particle_wave_looped", 0)
		self.wave_sound=true
	end
end

 
function update_server(self)
	if not (self.weather_set) then
		if (level.get_time_hours() >= 5 and level.get_time_hours() <= 20) then
			level.set_weather_fx("fx_blowout_day")
 		else
			level.set_weather_fx("fx_blowout_night")
 		end
		
		self.weather_set = true
	end
end

function update_client(self)
	
	if (db.get_actor() == nil) then
		return
	end
	
	local diff_game_sec = math.ceil(game.get_game_time():diffSec(self.inited_time)/2)	
	local rnd_sound = math.ceil(math.random(4000)/1000)
	local say_phrases = self.atmosfear.opt_blowout_warning=="siren" or self.atmosfear.opt_blowout_warning=="radio_siren" 
	local opt_give_task = self.atmosfear.opt_blowout_task=="give" 
	
	
	if (self.diff_sec >= self.surge_say1 and say_phrases ) then
		if (siren_snd_played == false)  then
			play_siren_sound(self)
		end
	end
	
	if (begin_snd_played == false) then
		if (rnd_sound % 2) ~= 0 then
			play_begin_sound(self, 1)
		else
			play_begin_sound(self, 2)
		end
	end

	if (impact_snd_played == false) then
		if (self.diff_sec>=self.surge_say2) then
			if (rnd_sound % 2) ~= 0 then
				play_blowout_sound(self, 1)
			else
				play_blowout_sound(self, 2)
			end
		end
	end
	
	self:launch_rockets()
	
	if(self.effector_set) then
		level.set_pp_effector_factor(surge_shock_pp_eff, self.diff_sec/(self.surge_time / 2), 0.1)
	end
	
	if(self.blowout_sound) then
		xr_sound.set_volume_sound_looped(db.get_actor():id(), "blowout_rumble", self.diff_sec / self.surge_time)
	end
	
	local cover = self:get_nearest_cover()
	
	if(self.diff_sec >= self.surge_kill and not(self.ui_disabled) 
		and(cover==nil or not(db.storage[cover].object:inside(db.get_actor():position()))))
	then
		local att = 1-(self.surge_time-self.diff_sec)/(self.surge_time-self.surge_kill)
		att = att*att*att*0.3
		local h = hit()
		h.type = hit.telepatic
		h.power = att
		h.impulse = 0.0
		h.direction = vector():set(0,0,1)
		h.draftsman = db.get_actor()
		
 		db.get_actor():hit(h)
	end
	
	if (self.diff_sec >= self.surge_say1 and not say_phrase1 and say_phrases) then 
		xr_sound.set_sound_play(db.get_actor():id(), self.surge_name_sound_phase1)
		--printf_msg("surge_say1")
		say_phrase1 = true
	end
	
	if (self.diff_sec >= self.surge_say2 and not say_phrase2 and say_phrases) then 
		xr_sound.set_sound_play(db.get_actor():id(), self.surge_name_sound_phase2)
		--printf_msg("surge_say2")
		say_phrase2 = true
	end
	
	if (self.diff_sec >= self.surge_say3 and not say_phrase3 and say_phrases) then
		--xr_sound.set_sound_play(db.get_actor():id(), self.surge_name_sound_phase1)
		xr_sound.set_sound_play(db.get_actor():id(), self.surge_name_sound_after);
		--printf_msg("surge_say3")
		say_phrase3 = true
	end
	
	if(self.diff_sec >= self.surge_time) and not(self.ui_disabled) then
		self:kill_all_unhided()
		self.ui_disabled = true
 	end
	
	--[[
	if(self.diff_sec >= self.surge_kill) and not(self.second_message_given) then			
 		xr_sound.play_sound_looped(db.get_actor():id(), "surge_earthquake_sound_looped")
		level.add_cam_effector("camera_effects\\earthquake.anm", earthquake_cam_eff, true, "")
		self.second_message_given = true
 	end
	
	if(self.diff_sec>= self.surge_shock) and not(self.effector_set) then
 		level.add_pp_effector("surge_shock.ppe", surge_shock_pp_eff, true)

		self.effector_set = true
 	end
	]]
	
	earthquake_Effects_Start(self)
	
	earthquake_effects_End(self)
	
	if(self.diff_sec >= self.surge_say2) and not(self.blowout_sound)then
 		xr_sound.set_sound_play(db.get_actor():id(), "blowout_begin")
		xr_sound.play_sound_looped(db.get_actor():id(), "blowout_rumble")
		xr_sound.set_volume_sound_looped(db.get_actor():id(), "blowout_rumble", 0.25)
		
		self.blowout_sound = true
	end
	
	if (self.diff_sec >= self.surge_say1) and not(self.task_given) and opt_give_task then				
		self:give_surge_hide_task()
		self.task_given = true
		printf_msg("give task surge_hide")
	end
	
	if (blowout_wave_start_1 == false and (self.diff_sec > self.surge_wave_1)) then
		WaveOrigAtmosfear3(self, diff_game_sec, 1)
		play_blowout_sound_wave(1)
		play_blowout_sound_wave(2)
		play_blowout_sound_wave(3)
		play_blowout_sound_wave(4)
	end
	
	if (blowout_wave_start_2 == false and (self.diff_sec > self.surge_wave_2)) then
		WaveOrigAtmosfear3(self, diff_game_sec, 2)
		play_blowout_sound_wave(1)
		play_blowout_sound_wave(2)
		play_blowout_sound_wave(3)
		play_blowout_sound_wave(4)
	end
	
	if (blowout_wave_start_3 == false and (self.diff_sec > self.surge_wave_3)) then
		WaveOrigAtmosfear3(self, diff_game_sec, 3)
		play_blowout_sound_wave(1)
		play_blowout_sound_wave(2)
		play_blowout_sound_wave(3)
		play_blowout_sound_wave(4)
	end
	
	if (blowout_wave_start_4 == false and (self.diff_sec > self.surge_wave_4)) then
		WaveOrigAtmosfear3(self, diff_game_sec, 4)
		play_blowout_sound_wave(1)
		play_blowout_sound_wave(2)
		play_blowout_sound_wave(3)
		play_blowout_sound_wave(4)
	end
	
	
	
	if (blowout_waves ~= nil) then		
		for k, tab in pairs (blowout_waves) do
			local effect         = tab.effect;
			local inited_time 	 = tab.inited_time;
			local start_position = tab.inited_pos;
			local actor_pos 	 = db.get_actor():position()
			local wavevol = 0
						
			if ( effect:playing() ) then
				local wave_pos=vector():set(
					actor_pos.x, 
					actor_pos.y/2, 
					start_position.z - (diff_game_sec-inited_time) * 3
					--start_position.z - (250 / (self.surge_time / self.diff_sec) )
				)
				
				--printf_msg("KID[%d]posZ[%f] -> new[%f]", k, actor_pos.z, wave_pos.z)
				
				effect:move_to(wave_pos, vector():set(0,0,0))
				local wavevoltemp=(250-math.abs(actor_pos.z-wave_pos.z))/250
				if (wavevoltemp>wavevol) then
					wavevol=wavevoltemp
				end
				
				if(self.wave_sound) then
					xr_sound.set_volume_sound_looped(db.get_actor():id(), "blowout_particle_wave_looped", wavevol)
				end
			end
		end
	end
	
end

function play_blowout_sound_wave(id)
	local snd_obj = nil
	
	if (id == 1) then 
		snd_obj = sounds["wave01"]
	elseif (id == 2) then 
		snd_obj = sounds["wave02"]
	elseif (id == 3) then
		snd_obj = sounds["wave03"]
	elseif (id == 4) then 
		snd_obj = sounds["wave04"]
	end
	
	if snd_obj ~= nil and snd_obj:playing() then
		snd_obj:stop()
	end
	if snd_obj ~= nil then
		snd_obj:play(db.get_actor())
		snd_obj.volume = 1
 	end
end


function earthquake_Effects_Start(self)
	local time = 2
	
	if (self.diff_sec >= 100 + time ) and (self.stages['quake40']==nil) then
		xr_sound.play_sound_looped(db.get_actor():id(), "surge_earthquake_sound_looped")
		level.remove_cam_effector(earthquake_cam_eff)
		level.add_cam_effector("camera_effects\\earthquake_40.anm", earthquake_cam_eff, true, "")
		self.stages['quake40']=true
 	end
	if (self.diff_sec >= 100 + (time * 1)) and (self.stages['quake60']==nil) then
		level.remove_cam_effector(earthquake_cam_eff)
		level.add_cam_effector("camera_effects\\earthquake_60.anm", earthquake_cam_eff, true, "")
		self.stages['quake60']=true
 	end
	if (self.diff_sec >= 100 + (time * 2)) and (self.stages['quake80']==nil) then
		level.remove_cam_effector(earthquake_cam_eff)
		level.add_cam_effector("camera_effects\\earthquake_80.anm", earthquake_cam_eff, true, "")
		self.stages['quake80']=true
 	end
	if (self.diff_sec>=100 + (time * 3)) and (self.stages['quake100']==nil) then
		level.remove_cam_effector(earthquake_cam_eff)
		level.add_cam_effector("camera_effects\\earthquake.anm", earthquake_cam_eff, true, "")
		self.stages['quake100']=true
 	end
end

function earthquake_effects_End(self)
	local time = 2
	
	if (self.diff_sec>=200 + (time * 1) ) and (self.stages['quake100']==true) then
		level.remove_cam_effector(earthquake_cam_eff)
		level.add_cam_effector("camera_effects\\earthquake_80.anm", earthquake_cam_eff, true, "")
		self.stages['quake100']=false
	end
	if (self.diff_sec>=200 + (time * 2) ) and (self.stages['quake80']==true) then
		level.remove_cam_effector(earthquake_cam_eff)
		level.add_cam_effector("camera_effects\\earthquake_60.anm", earthquake_cam_eff, true, "")
		self.stages['quake80']=false
	end
	if (self.diff_sec>=200 + (time * 3)) and (self.stages['quake60']==true) then
		level.remove_cam_effector(earthquake_cam_eff)
		level.add_cam_effector("camera_effects\\earthquake_40.anm", earthquake_cam_eff, true, "")
		self.stages['quake60']=false
	end
	if (self.diff_sec>=200 + (time * 4)) and (self.stages['quake40']==true) then
		level.remove_cam_effector(earthquake_cam_eff)
		level.add_cam_effector("camera_effects\\earthquake_20.anm", earthquake_cam_eff, true, "")
		self.stages['quake40']=false
	end
	if (self.diff_sec>=200 + (time * 5)) and (self.stages['quake20']==true) and (self.stages['quakeended']==nil) then
		level.remove_cam_effector(earthquake_cam_eff)
		self.stages['quakeended']=true
	end
	
end